~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alpha Blending

Classic  out = Src.RGB * S.A + Dest * ( 1 - Src.A );

Actual 
out.a = Src.A + Dest.A * ( 1 - Src.A );
if( out.a == 0 ) out.rgb = 0;
else
	out.rgb = ( Src.RGB * Src.A + Dest.RGB * Dest.A * ( 1 - Src.A ) ) / out.a;




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
determinant, find what direction a point is in relation to a line, left/right 
https://stackoverflow.com/questions/1560492/how-to-tell-whether-a-point-is-to-the-right-or-left-side-of-a-line

Use the sign of the determinant of vectors (AB,AM), where M(X,Y) is the query point:
position = sign((Bx - Ax) * (Y - Ay) - (By - Ay) * (X - Ax))
It is 0 on the line, and +1 on one side, -1 on the other side.

public bool isLeft(Point a, Point b, Point c){
     return ((b.X - a.X)*(c.Y - a.Y) - (b.Y - a.Y)*(c.X - a.X)) > 0;
}
Where a = line point 1; b = line point 2; c = point to check against.
If the formula is equal to 0, the points are colinear.
If the line is horizontal, then this returns true if the point is above the line.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
is perpendicular to the line,
x = y1-y2;
y = x2-x1;


https://twitter.com/Gelada/status/1305890934681460737
Four different views of the function f(x,y) = x^3-2xy^2+y^3.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://discourse.threejs.org/t/camera-zoom-to-fit-object/936/24
function fitCameraToSelection( camera, controls, selection, fitOffset = 1.2 ) {
  
  const box = new THREE.Box3();
  
  for( const object of selection ) box.expandByObject( object );
  
  const size = box.getSize( new THREE.Vector3() );
  const center = box.getCenter( new THREE.Vector3() );
  
  const maxSize = Math.max( size.x, size.y, size.z );
  const fitHeightDistance = maxSize / ( 2 * Math.atan( Math.PI * camera.fov / 360 ) );
  // const fitHeightDistance = maxSize / ( 2 * Math.atan( (camera.fov * Math.PI / 180) / 2 ) ); // also works
  const fitWidthDistance = fitHeightDistance / camera.aspect;
  const distance = fitOffset * Math.max( fitHeightDistance, fitWidthDistance );
  
  const direction = controls.target.clone()
    .sub( camera.position )
    .normalize()
    .multiplyScalar( distance );

  controls.maxDistance = distance * 10;
  controls.target.copy( center );
  
  camera.near = distance / 100;
  camera.far = distance * 100;
  camera.updateProjectionMatrix();

  camera.position.copy( controls.target ).sub(direction);
  
  controls.update();
  
// Does a decent job of handling Width
  y = 250 / ( 2 * Math.atan( fov * 0.5 * camera.aspect ) );
  camera.position.y = y;
}

[ resizing while keeping zoom ]
function updateViewport() {
    renderer.setViewport(0, 0, window.innerWidth, window.innerHeight);
    camera.fov = window.innerHeight / window.screen.height;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();


[ ANOTHER ONE RELATED TO KEEPING THE SIZE DURING RESIZE ]
http://jsfiddle.net/Q4Jpu/

// remember these initial values
var tanFOV = Math.tan( ( ( Math.PI / 180 ) * camera.fov / 2 ) );
var windowHeight = window.innerHeight;

// Event Listeners
window.addEventListener( 'resize', onWindowResize, false );

function onWindowResize( event ) {
    camera.aspect = window.innerWidth / window.innerHeight;
    // adjust the FOV
    camera.fov = ( 360 / Math.PI ) * Math.atan( tanFOV * ( window.innerHeight / windowHeight ) );
    camera.updateProjectionMatrix();
    camera.lookAt( scene.position );
    renderer.setSize( window.innerWidth, window.innerHeight );
    renderer.render( scene, camera );


renderer.setSize(window.innerWidth, window.innerHeight);
camera.fov = Math.atan(window.innerHeight / 2 / camera.position.z) * 2 * THREE.Math.RAD2DEG;
camera.aspect = window.innerWidth / window.innerHeight;


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http://www.songho.ca/opengl/gl_anglestoaxes.html

// minimal implimentation of Vector3 struct
struct Vector3
{
    float x;
    float y;
    float z;
    Vector3() : x(0), y(0), z(0) {}; // initialze when created
};


///////////////////////////////////////////////////////////////////////////////
// convert Euler angles(x,y,z) to axes(left, up, forward)
// Each column of the rotation matrix represents left, up and forward axis.
// The order of rotation is Roll->Yaw->Pitch (Rx*Ry*Rz)
// Rx: rotation about X-axis, pitch
// Ry: rotation about Y-axis, yaw(heading)
// Rz: rotation about Z-axis, roll
//    Rx           Ry          Rz
// |1  0   0| | Cy  0 Sy| |Cz -Sz 0|   | CyCz        -CySz         Sy  |
// |0 Cx -Sx|*|  0  1  0|*|Sz  Cz 0| = | SxSyCz+CxSz -SxSySz+CxCz -SxCy|
// |0 Sx  Cx| |-Sy  0 Cy| | 0   0 1|   |-CxSyCz+SxSz  CxSySz+SxCz  CxCy|
///////////////////////////////////////////////////////////////////////////////
void anglesToAxes(const Vector3 angles, Vector3& left, Vector3& up, Vector3& forward)
{
    const float DEG2RAD = acos(-1) / 180.0f;  // PI/180
    float sx, sy, sz, cx, cy, cz, theta;

    // rotation angle about X-axis (pitch)
    theta = angles.x * DEG2RAD;
    sx = sin(theta);
    cx = cos(theta);

    // rotation angle about Y-axis (yaw)
    theta = angles.y * DEG2RAD;
    sy = sin(theta);
    cy = cos(theta);

    // rotation angle about Z-axis (roll)
    theta = angles.z * DEG2RAD;
    sz = sin(theta);
    cz = cos(theta);

    // determine left axis
    left.x = cy*cz;
    left.y = sx*sy*cz + cx*sz;
    left.z = -cx*sy*cz + sx*sz;

    // determine up axis
    up.x = -cy*sz;
    up.y = -sx*sy*sz + cx*cz;
    up.z = cx*sy*sz + sx*cz;

    // determine forward axis
    forward.x = sy;
    forward.y = -sx*cy;
    forward.z = cx*cy;
}



// SINGLE AXIS CONSTRAINT IDEA
HingeConstraint( axis, min, max ){
	this.axis	= axis;
	this.min 	= min;
	this.max 	= max;
	this.w_min	= Math.cos( min * 0.5 );
	this.w_max	= Math.cos( max * 0.5 );

	apply( q ){
		if( q[3] > this.w_max ) return q.from_axis_angle( this.axis, this.max );
		if( q[3] < this.w_min ) return q.from_axis_angle( this.axis, this.min );

		// How to check for axis??
	}
}



///////////////////////////////////////////////////////////////////////////////
// Makes a fun shape in SDF, maybe good for weapons
///////////////////////////////////////////////////////////////////////////////
float easeInOutExpo( float x ){
    return ( x <= 0.0 )? 0.0 :
           ( x >= 1.0 )? 1.0 :
           ( x < 0.5 )?
                pow( 2.0, 20.0 * x - 10.0) * 0.5:
                (2.0 - pow( 2.0, -20.0 * x + 10.0) ) * 0.5;
}
dd = sdf_stick_scurve3( xmp, elpos, hdpos, 0.08, 0.19, 0.16 );
float sdf_stick_scurve3( vec3 p, vec3 a, vec3 b, float fa, float fb, float fc ){
    vec3 ba = b - a;
    vec3 pa = p - a;
    float h = clamp( dot( pa, ba ) / dot( ba, ba ), 0.0, 1.0 );
    float t = easeInOutExpo( h ) * 2.0 - 1.0;

    //float r = ( t < 0.0 )? 
    //    mix( fb, fa, abs(t) ):         // 0 > .5
    //    mix( fb, fc, t  );   // .5 > 1

    float r = mix( fb, fc, t  );
    return length( pa - h * ba ) - r;
}


===================================================
SIGMOID CURVES

https://bl.ocks.org/mforando/159c8d6109bca7e7356144b4b068897d

https://en.wikipedia.org/wiki/Sigmoid_function
function sigmoid(z) {
  return 1 / (1 + Math.exp(-z));
}

//https://en.wikipedia.org/wiki/Logistic_function
function sigmoid(t) {
    return 1/(1+Math.pow(Math.E, -t));
}

https://medium.com/hackernoon/ease-in-out-the-sigmoid-factory-c5116d8abce9
https://medium.com/hackernoon/ease-out-the-half-sigmoid-7240df433d98
function sigmoidFactory (k) {
	function base (t) {
		return (1 / (1 + Math.exp(-k * t))) - 0.5;
	}

	var correction = 0.5 / base(1);

	return function (t) {
		t = clamp(t, 0, 1);
		return correction * base(2 * t - 1) + 0.5;
	};
}

function clamp (val, lower, upper) {
	return Math.max(Math.min(val, upper), lower);
}

https://medium.com/hackernoon/the-spring-factory-4c3d988e7129#.otyvxccwy
https://medium.com/hackernoon/the-bounce-factory-3498de1e5262#.t72mlszex